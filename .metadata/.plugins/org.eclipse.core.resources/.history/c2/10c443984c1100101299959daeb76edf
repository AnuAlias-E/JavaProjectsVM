package com.training.ui;

import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

 class Graph<T> {
	private Map<T, List<T>> map = new TreeMap<>();

	public void addVertex(T s) {
		map.put(s, new LinkedList<>());
	}

	public void addEdge(T source, T destination, boolean bidirectional) {
		if (!map.containsKey(source)) {
			addVertex(source);
		}
		if (!map.containsKey(destination)) {
			addVertex(destination);
		}

		map.get(source).add(destination);
		if (bidirectional) {
			map.get(destination).add(source);
		}

	}

	public String toString() {
		StringBuilder builder = new StringBuilder();

		for (T v : map.keySet()) {
			builder.append(v.toString() + " : ");
			for (T w : map.get(v)) {
				builder.append(w.toString() + " ");
			}
			builder.append("\n");
		}

		return builder.toString();
	}
}
public class Main {
		
	
	public static void main(String[] args) {
		int N = 5;
		int M = 4;
		int[][] a = { { 1, 4 }, { 1, 3 }, { 1, 2 }, { 2, 4 } };
		int q = 5;
		int[] Queries = { 1, 2, 3, 4, 5 };
		int result[][] = solve(N, M, a, q, Queries);
	}

	private static int[][] solve(int N, int M, int[][] a, int q, int[] Queries) {
		Graph<Integer> graph = new Graph<>();
		for(int i=0;i<a.length;i++) {
			for(int j=0;j<a[i].length;j++) {
				graph.addEdge(a[i][0], a[i][1], false);
				
			}
		}
		
		return null ;
	}
}
