package com.training.ui;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.training.dto.request.CustomerAddRequest;
import com.training.dto.request.CustomerDeleteRequest;
import com.training.dto.request.CustomerUpdateRequest;
import com.training.dto.response.CustomerAddResponse;
import com.training.dto.response.CustomerSearchResponse;
import com.training.dto.response.CustomerShowAllResponse;
import com.training.exception.CustomerNotFoundException;
import com.training.model.Customer;
import com.training.service.CustomerService;

@RestController
@RequestMapping(value = "/api")
public class CustomerController {

	@Autowired
	CustomerService service;

	@PostMapping(value = "/add", produces = { MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_VALUE })
	public ResponseEntity<CustomerAddResponse> addVisitor(@RequestBody CustomerAddRequest request) {
		CustomerAddResponse addResponse = new CustomerAddResponse();

		Customer customer = service.addNewCustomer(request.getCustomer());
		addResponse.setStatusCode(201);
		addResponse.setDescription("Customer Added Successfully");
		addResponse.setCustomer(customer);
		return new ResponseEntity<>(addResponse, HttpStatus.CREATED);
	}

	@PutMapping(value = "/modify")
	public ResponseEntity<CustomerAddResponse> updateVisitor(@RequestBody CustomerUpdateRequest request) {
		CustomerAddResponse response = new CustomerAddResponse();

		Customer customer = service.getCustomerById(request.getCustomer().getId());
		if (customer != null) {

			Customer customer1 = service.updateCustomer(customer);
			response.setStatusCode(200);
			response.setDescription("Customer Modified Successfully");
			response.setCustomer(customer1);
			return new ResponseEntity<>(response, HttpStatus.OK);
		} else {
			response.setStatusCode(404);
			response.setDescription("Customer Not Found");
			response.setCustomer(customer);
			return new ResponseEntity<>(response, HttpStatus.NOT_FOUND);
		}
	}

	@GetMapping(value = "/find/{custid}")
	public ResponseEntity<CustomerSearchResponse> searchVisitor(@PathVariable(name = "custid") int customerId)
			throws Exception {
		Customer customer = service.getCustomerById(customerId);
		CustomerSearchResponse response = new CustomerSearchResponse();
		if (customer != null) {
			response.setStatusCode(200);
			response.setDescription("Customer fetched Successfully");
			response.setCustomer(customer);
			return new ResponseEntity<>(response, HttpStatus.OK);
		}

		else {
			Exception e = new CustomerNotFoundException("Customer Not Found");
			throw e;
		}
	}

	@GetMapping(value = "/showAll", produces = { MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_VALUE })
	public ResponseEntity<CustomerShowAllResponse> getAllVisitors() {
		List<Customer> customers = service.getAllCustomers();
		CustomerShowAllResponse response = new CustomerShowAllResponse();
		if (customers.isEmpty()) {
			response.setStatusCode(404);
			response.setDescription("There are no cutomers");
			response.setCustomers(customers);
		} else {
			response.setStatusCode(200);
			response.setDescription("All Customers Fetched");
			response.setCustomers(customers);
		}
		// return new ResponseEntity<>(response, HttpStatus.OK);
		return ResponseEntity.ok(response);
	}

	@DeleteMapping(value = "/delete")
	public ResponseEntity<CustomerDeleteResponse> deleteVisitor(@RequestBody CustomerDeleteRequest request) {
		CustomerDeleteResponse deleteResponse = new CustomerDeleteResponse();

		Visitor visitor1 = this.service.searchVisitor(request.getVisitor());
		if (visitor1 != null) {
			try {
				boolean isDeleted = service.deleteVisitor(request.getVisitor());
				deleteResponse.setStatusCode(200);
				deleteResponse.setDescription("Visitor Deleted Successfully");
				deleteResponse.setDeleteStatus(isDeleted);
				return ResponseEntity.ok().body(deleteResponse);

			} catch (Exception e) {
				// return new ResponseEntity<>(false, HttpStatus.INTERNAL_SERVER_ERROR);
				deleteResponse.setStatusCode(500);
				deleteResponse.setDescription("Visitor Not Deleted Successfully");
				deleteResponse.setDeleteStatus(false);

				return ResponseEntity.internalServerError().body(deleteResponse);
			}
		} else {
			deleteResponse.setStatusCode(404);
			deleteResponse.setDescription("Visitor Not Found");
			deleteResponse.setDeleteStatus(false);

			return new ResponseEntity<>(deleteResponse, HttpStatus.NOT_FOUND);
		}

	}

	@GetMapping(value = "/showAllByName/{vname}", produces = { MediaType.APPLICATION_XML_VALUE,
			MediaType.APPLICATION_JSON_VALUE })
	public ResponseEntity<VisitorShowAllByNameResponse> getAllVisitorsByName(
			@PathVariable(name = "vname") String name) {
		List<Visitor> visitorsBySameName = service.getAllVisitorsBySameName(name);
		VisitorShowAllByNameResponse response = new VisitorShowAllByNameResponse();
		if (visitorsBySameName.isEmpty()) {
			response.setStatusCode(404);
			response.setDescription("There are no visitors by same name " + name);
			response.setVisitors(visitorsBySameName);
		} else {
			response.setStatusCode(200);
			response.setDescription("There are " + visitorsBySameName.size() + " visitors with same name " + name);
			response.setVisitors(visitorsBySameName);
		}

		// return new ResponseEntity<>(response, HttpStatus.OK);
		return ResponseEntity.ok(response);
	}

	@GetMapping(value = "/showAllByCity", produces = { MediaType.APPLICATION_XML_VALUE,
			MediaType.APPLICATION_JSON_VALUE })
	public ResponseEntity<VisitorShowAllByCityResponse> getAllVisitorsByCity(
			@RequestParam(name = "vcity") String city) {
		List<Visitor> visitorsByCity = service.getAllVisitorsByCity(city);
		VisitorShowAllByCityResponse response = new VisitorShowAllByCityResponse();
		if (visitorsByCity.isEmpty()) {
			response.setStatusCode(404);
			response.setDescription("There are no visitors by same city " + city);
			response.setVisitors(visitorsByCity);
		} else {
			response.setStatusCode(200);
			response.setDescription("There are " + visitorsByCity.size() + " visitors with same city " + city);
			response.setVisitors(visitorsByCity);
		}

		// return new ResponseEntity<>(response, HttpStatus.OK);
		return ResponseEntity.ok(response);
	}
}
